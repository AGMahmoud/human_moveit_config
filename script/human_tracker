#!/usr/bin/env python
from human_moveit_config.human_model import HumanModel
from sensor_link.sensor_reader import SensorReader
import tf
import rospkg
import json
import rospy
import numpy as np
from collections import deque
from sensor_msgs.msg import JointState
from tools.unity_bridge import UnityBridge
from trajectories.joint_trajectories import trapezoidal_speed_trajectory


class HumanTracker(object):
    def __init__(self, rate=10):
        self.inner_rate = rate
        self.rate = rospy.Rate(rate)
        # initialize tf broadcaster
        self.tfb = tf.TransformBroadcaster()
        # import calibration matrices
        self.rospack = rospkg.RosPack()
        pkg_dir = self.rospack.get_path('human_moveit_config') + '/tmp/'
        filename = pkg_dir + 'sensor_calibration.json'
        with open(filename) as datafile:
            sensor_calibration = json.load(datafile)
        # set the calibration parameter
        rospy.set_param('/human/calibration', sensor_calibration)
        # create link with sensors
        try:
            self.sensor = SensorReader(calibrated=True)
        except KeyError:
            rospy.logerr("Please calibrate before running the human tracker")
            self.calibrated = False
        else:
            self.calibrated = True
            rospy.loginfo("Skeleton is calibrated!")
        self.model = HumanModel(control=True)
        self.prefix = self.model.prefix
        # create history for joint filtering
        self.joint_history = deque(maxlen=4)
        self.bridge = UnityBridge()
        self.previous_state = self.model.get_current_state()

    def jitter_removal_filter(self, joint_state, eps=1):
        out_state = JointState()
        out_state.name = joint_state.name
        if len(self.joint_history) == self.joint_history.maxlen:
            joints = np.array(joint_state.position)
            med = np.median(self.joint_history, axis=0)
            out_state.position = [(j if abs(j - med[index]) < eps else med[index]) for index, j in enumerate(joints)]
        else:
            out_state.position = joint_state.position
        return out_state

    def send_trajectory(self, joint_state, nb_points=10):
        traj_rate = rospy.Rate(self.inner_rate * nb_points)
        path = trapezoidal_speed_trajectory(joint_state, self.previous_state, 1, 0.2, nb_points)
        for p in path.points:
            state = JointState()
            state.name = path.joint_names
            state.position = p.positions
            self.bridge.send_state(state)
            traj_rate.sleep()

    def publish_skeleton(self):
        # update the skeleton
        self.sensor.update_skeleton('opt')
        skeleton = self.sensor.skel_data
        if self.prefix + '/base' in skeleton.keys():
            # get the transformation from sensor_frame to human base
            frame = skeleton[self.prefix + '/base']
            SensorTHuman = frame[1]
            # publish it wrt to the sensor frame
            self.tfb.sendTransform([0, 0, 0], [0, 0, 0, 1],
                                   rospy.Time.now(), 'tracker/' + self.prefix + '/base', self.prefix + '/base')
            self.tfb.sendTransform(SensorTHuman[0], SensorTHuman[1],
                                   rospy.Time.now(), self.prefix + '/base', frame[0] + '_frame')
            # loop through all the recorded frames
            obs_dict = {}
            for key, value in skeleton.iteritems():
                if key != self.prefix + '/base':
                    # get the pose wrt to human base
                    pose = value[1]
                    self.tfb.sendTransform(pose[0], np.array(pose[1])/np.linalg.norm(pose[1]), rospy.Time.now(),
                                           'tracker/' + key, 'tracker/' + self.prefix + '/base')
                    obs_dict[key] = value[1]
            # request the IK
            js = self.model.inverse_kinematic(obs_dict, tolerance=0.2, seed=self.model.get_current_state())
            # filter the state based on jitter removal filtering
            filtered_state = self.jitter_removal_filter(js, eps=0.2)
            # filtered_state = js
            # send the state
            self.model.send_state(filtered_state)
            self.send_trajectory(filtered_state)
            # add the state to history
            self.previous_state = filtered_state
            self.joint_history.append(js.position)

    def set_tracked_frames(self, dict_frames):
        self.sensor.set_sensor_frames(dict_frames)

    def run(self):
        if self.calibrated:
            while not rospy.is_shutdown():
                self.publish_skeleton()
                self.rate.sleep()


if __name__ == '__main__':
    rospy.init_node('human_tracker')
    tracker = HumanTracker()
    tracker.run()
